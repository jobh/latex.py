\documentclass{article}

% Use another prefix for certain macros.


\begin{document}

We can use this secondary prefix for, e.g, marking unknowns in equations to
ensure they always use the same notation (even in plain text). We could have done this with
the standard prefix as well, but see below...

\begin{equation}
S\dot{P_\text{f}} \alpha \vec{\nabla}} \cdot \dot{\vec{u}} = @q
\end{equation}

But then we have to define them all, even the plain ones (\ensuremath{S} and @q). Maybe this will work:

% across all scopes (since it contains underscores) and thus must check explicitly which
% scope it is called in.


Now the equation is
\begin{equation}
S\dot{P_\text{f}} \alpha \vec{\nabla}} \cdot \dot{\vec{u}} = q,
\end{equation}
with \ensuremath{q} as a source term.

Yes! But there's a problem:

jobh\ensuremath{simula}.no, jobh@{}simula.no, jobh@{simula.no}

We can work around this by protecting the part after @ with brackets, like above.
This can even be invisible in the output, like so:

% Make a macro '' (empty string) that just returns its escaped (single) argument

Try again:
We can work around this by protecting the part after @ with brackets, like above.

jobh\ensuremath{simula}.no, jobh@simula.no, jobh@simula.no

On my keyboard, there are several seldom-used symbols available, including '¬'
and '£', but these would be a problem for collaborators with different keyboard
layouts. Maybe '#' is an option, if we are careful to avoid code listings?


\begin{equation}
(x+y)^2 = x^2+y^2+2xy,
\end{equation}
for any \ensuremath{x} and \ensuremath{y} in \ensuremath{\mathcal{R}}.

\end{document}
