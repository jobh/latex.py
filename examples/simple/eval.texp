\begin{document}

% Eval (and other builtins) are by default not visible as a macros, only in
% python blocks. We can make it available by binding to a macro name:
%@__macros__.eval = eval

$1+3/5 = 1.6$

% We can even use the empty string as macro name. This is still fairly safe,
% (b) it is even more uncommon that the '...' part is a valid python expression.
%- = eval
%+__builtin__.get_scope()[r""] = eval

$2+4/6 = 2.66666666667$

% The following is escaped, and hence not eval'ed.
%-escape = escape
%+__builtin__.get_scope()[r"escape"] = escape
$3+5/7 = @{3+5/7}$

% Another way is to specify that expansion only happens if there is exactly
% one argument (that is, ignore wrong argument count instead of raising an
% exception).
%- = lambda *args: len(args)==1 and eval(args[0]) or ignore()
%+__builtin__.get_scope()[r""] = lambda *args: len(args)==1 and eval(args[0]) or ignore()
$2+4/6 = 2.66666666667$
$2+4/6 = @{2+4/6}{}$


% While '=' is special-cased to allow using reserved python words as macro
% names, or even the empty string, these cannot be manipulated in other ways
% in standard python. How to --- for example --- delete the macro named ''?
% Two ways: Assign the 'ignore' function, or delete it from parser_scope
% directly. That is, either of the following two directives is sufficient:
%- = ignore
%+__builtin__.get_scope()[r""] = ignore
%@del get_scope()['']

% Note, however, that KeyErrors are normally reported so that missing macro
% definitions are identified. We can turn this off for now.
%@args.verbose = 1

$4+6/8 = @{4+6/8}$

\end{document}
